{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fast Dash \u00b6 Create input-output web applications and user interfaces using Plotly Dash lightning fast. Free software: MIT Documentation: https://fast-dash.readthedocs.io Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#fast-dash","text":"Create input-output web applications and user interfaces using Plotly Dash lightning fast. Free software: MIT Documentation: https://fast-dash.readthedocs.io","title":"Fast Dash"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"\u00b6 Top-level package for Fast Dash. Components \u00b6 GraphOutput \u00b6 Extends dcc.Graph __init__ ( self , label_ = None , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"figure\" self . placeholder = ( go . Figure () . update_yaxes ( visible = False , showticklabels = False ) . update_xaxes ( visible = False , showticklabels = False ) ) self . label_ = label_ ImageOutput \u00b6 Extends dbc.CardImg __init__ ( self , label_ = None , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs , style = { \"max-width\" : \"100%\" }) self . attributable_property = \"src\" self . placeholder = None self . label_ = label_ SliderInput \u00b6 Extends dbc.Input __init__ ( self , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\" TextInput \u00b6 Extends dbc.Input __init__ ( self , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\" TextOutput \u00b6 Extends dbc.Input __init__ ( self , label_ = None , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\" self . placeholder = None self . label_ = label_ UploadInput \u00b6 Extends dcc.Upload __init__ ( self , label = 'Click to upload' , ** kwargs ) special \u00b6 Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label = \"Click to upload\" , ** kwargs ): super () . __init__ ( children = dbc . Col ([ label ]), style = { \"lineHeight\" : \"60px\" , \"borderWidth\" : \"1px\" , \"borderStyle\" : \"dashed\" , \"borderRadius\" : \"5px\" , \"textAlign\" : \"center\" , }, ** kwargs ) self . attributable_property = \"contents\" fast_dash \u00b6 Main module. utils \u00b6 Utility functions assign_ids_to_inputs ( inputs , callback_fn ) \u00b6 Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_inputs ( inputs , callback_fn ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( inputs , list ): inputs = [ inputs ] inputs_with_ids = [] for input_ , parameter_name in zip ( inputs , get_input_names_from_callback_fn ( callback_fn ) ): input_ . id = parameter_name inputs_with_ids . append ( input_ ) return inputs_with_ids assign_ids_to_outputs ( outputs ) \u00b6 Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_outputs ( outputs ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( outputs , list ): outputs = [ outputs ] outputs_with_ids = [] for idx , output_ in enumerate ( outputs ): output_ . id = f \"output- { idx + 1 } \" outputs_with_ids . append ( output_ ) return outputs_with_ids get_input_names_from_callback_fn ( callback_fn ) \u00b6 Returns the names of function arguments as a list of strings Source code in fast_dash/utils.py def get_input_names_from_callback_fn ( callback_fn ): \"\"\" Returns the names of function arguments as a list of strings \"\"\" signature = inspect . signature ( callback_fn ) parameters = signature . parameters parameter_list = list ( parameters ) return parameter_list theme_mapper ( theme_name ) \u00b6 Map theme name string ot a dbc theme object Source code in fast_dash/utils.py def theme_mapper ( theme_name ): \"\"\" Map theme name string ot a dbc theme object \"\"\" theme_mapper_dict = { \"CERULEAN\" : dbc . themes . CERULEAN , \"COSMO\" : dbc . themes . COSMO , \"CYBORG\" : dbc . themes . CYBORG , \"DARKLY\" : dbc . themes . DARKLY , \"FLATLY\" : dbc . themes . FLATLY , \"JOURNAL\" : dbc . themes . JOURNAL , \"LITERA\" : dbc . themes . LITERA , \"LUMEN\" : dbc . themes . LUMEN , \"LUX\" : dbc . themes . LUX , \"MATERIA\" : dbc . themes . MATERIA , \"MINTY\" : dbc . themes . MINTY , \"MORPH\" : dbc . themes . MORPH , \"PULSE\" : dbc . themes . PULSE , \"QUARTZ\" : dbc . themes . QUARTZ , \"SANDSTONE\" : dbc . themes . SANDSTONE , \"SIMPLEX\" : dbc . themes . SIMPLEX , \"SKETCHY\" : dbc . themes . SKETCHY , \"SLATE\" : dbc . themes . SLATE , \"SOLAR\" : dbc . themes . SOLAR , \"SPACELAB\" : dbc . themes . SPACELAB , \"SUPERHERO\" : dbc . themes . SUPERHERO , \"UNITED\" : dbc . themes . UNITED , \"VAPOR\" : dbc . themes . VAPOR , \"YETI\" : dbc . themes . YETI , \"ZEPHYR\" : dbc . themes . ZEPHYR , } theme = theme_mapper_dict . get ( theme_name . upper (), dbc . themes . YETI ) return theme","title":"modules"},{"location":"api/#fast_dash","text":"Top-level package for Fast Dash.","title":"fast_dash"},{"location":"api/#fast_dash.Components","text":"","title":"Components"},{"location":"api/#fast_dash.Components.GraphOutput","text":"Extends dcc.Graph","title":"GraphOutput"},{"location":"api/#fast_dash.Components.GraphOutput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"figure\" self . placeholder = ( go . Figure () . update_yaxes ( visible = False , showticklabels = False ) . update_xaxes ( visible = False , showticklabels = False ) ) self . label_ = label_","title":"__init__()"},{"location":"api/#fast_dash.Components.ImageOutput","text":"Extends dbc.CardImg","title":"ImageOutput"},{"location":"api/#fast_dash.Components.ImageOutput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs , style = { \"max-width\" : \"100%\" }) self . attributable_property = \"src\" self . placeholder = None self . label_ = label_","title":"__init__()"},{"location":"api/#fast_dash.Components.SliderInput","text":"Extends dbc.Input","title":"SliderInput"},{"location":"api/#fast_dash.Components.SliderInput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\"","title":"__init__()"},{"location":"api/#fast_dash.Components.TextInput","text":"Extends dbc.Input","title":"TextInput"},{"location":"api/#fast_dash.Components.TextInput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\"","title":"__init__()"},{"location":"api/#fast_dash.Components.TextOutput","text":"Extends dbc.Input","title":"TextOutput"},{"location":"api/#fast_dash.Components.TextOutput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label_ = None , ** kwargs ): super () . __init__ ( ** kwargs ) self . attributable_property = \"value\" self . placeholder = None self . label_ = label_","title":"__init__()"},{"location":"api/#fast_dash.Components.UploadInput","text":"Extends dcc.Upload","title":"UploadInput"},{"location":"api/#fast_dash.Components.UploadInput.__init__","text":"Initialize self. See help(type(self)) for accurate signature. Source code in fast_dash/Components.py def __init__ ( self , label = \"Click to upload\" , ** kwargs ): super () . __init__ ( children = dbc . Col ([ label ]), style = { \"lineHeight\" : \"60px\" , \"borderWidth\" : \"1px\" , \"borderStyle\" : \"dashed\" , \"borderRadius\" : \"5px\" , \"textAlign\" : \"center\" , }, ** kwargs ) self . attributable_property = \"contents\"","title":"__init__()"},{"location":"api/#fast_dash.fast_dash","text":"Main module.","title":"fast_dash"},{"location":"api/#fast_dash.utils","text":"Utility functions","title":"utils"},{"location":"api/#fast_dash.utils.assign_ids_to_inputs","text":"Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_inputs ( inputs , callback_fn ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( inputs , list ): inputs = [ inputs ] inputs_with_ids = [] for input_ , parameter_name in zip ( inputs , get_input_names_from_callback_fn ( callback_fn ) ): input_ . id = parameter_name inputs_with_ids . append ( input_ ) return inputs_with_ids","title":"assign_ids_to_inputs()"},{"location":"api/#fast_dash.utils.assign_ids_to_outputs","text":"Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_outputs ( outputs ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( outputs , list ): outputs = [ outputs ] outputs_with_ids = [] for idx , output_ in enumerate ( outputs ): output_ . id = f \"output- { idx + 1 } \" outputs_with_ids . append ( output_ ) return outputs_with_ids","title":"assign_ids_to_outputs()"},{"location":"api/#fast_dash.utils.get_input_names_from_callback_fn","text":"Returns the names of function arguments as a list of strings Source code in fast_dash/utils.py def get_input_names_from_callback_fn ( callback_fn ): \"\"\" Returns the names of function arguments as a list of strings \"\"\" signature = inspect . signature ( callback_fn ) parameters = signature . parameters parameter_list = list ( parameters ) return parameter_list","title":"get_input_names_from_callback_fn()"},{"location":"api/#fast_dash.utils.theme_mapper","text":"Map theme name string ot a dbc theme object Source code in fast_dash/utils.py def theme_mapper ( theme_name ): \"\"\" Map theme name string ot a dbc theme object \"\"\" theme_mapper_dict = { \"CERULEAN\" : dbc . themes . CERULEAN , \"COSMO\" : dbc . themes . COSMO , \"CYBORG\" : dbc . themes . CYBORG , \"DARKLY\" : dbc . themes . DARKLY , \"FLATLY\" : dbc . themes . FLATLY , \"JOURNAL\" : dbc . themes . JOURNAL , \"LITERA\" : dbc . themes . LITERA , \"LUMEN\" : dbc . themes . LUMEN , \"LUX\" : dbc . themes . LUX , \"MATERIA\" : dbc . themes . MATERIA , \"MINTY\" : dbc . themes . MINTY , \"MORPH\" : dbc . themes . MORPH , \"PULSE\" : dbc . themes . PULSE , \"QUARTZ\" : dbc . themes . QUARTZ , \"SANDSTONE\" : dbc . themes . SANDSTONE , \"SIMPLEX\" : dbc . themes . SIMPLEX , \"SKETCHY\" : dbc . themes . SKETCHY , \"SLATE\" : dbc . themes . SLATE , \"SOLAR\" : dbc . themes . SOLAR , \"SPACELAB\" : dbc . themes . SPACELAB , \"SUPERHERO\" : dbc . themes . SUPERHERO , \"UNITED\" : dbc . themes . UNITED , \"VAPOR\" : dbc . themes . VAPOR , \"YETI\" : dbc . themes . YETI , \"ZEPHYR\" : dbc . themes . ZEPHYR , } theme = theme_mapper_dict . get ( theme_name . upper (), dbc . themes . YETI ) return theme","title":"theme_mapper()"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Kedar Dabhadkar kdabhadk@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Kedar Dabhadkar kdabhadk@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_fast_dash ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_fast_dash ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2022-01-29) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2022-01-29","text":"First release on PyPI.","title":"0.1.0 (2022-01-29)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Fast Dash, run this command in your terminal: 1 $ pip install fast_dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : 1 $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Fast Dash, run this command in your terminal: 1 $ pip install fast_dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : 1 $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Fast Dash in a project 1 import fast_dash","title":"usage"},{"location":"usage/#usage","text":"To use Fast Dash in a project 1 import fast_dash","title":"Usage"}]}