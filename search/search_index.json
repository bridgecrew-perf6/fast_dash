{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Open source, Python-based tool to develop web applications lightning fast. Documentation: https://dkedar7.github.io/fast_dash/ Source code: https://github.com/dkedar7/fast_dash/ Fast Dash is a Python module that makes the development of web applications fast and easy. It is built on top of Plotly Dash and can be used to build web interfaces for Machine Learning models or to showcase any proof of concept without the hassle of developing UI from scratch. Simple example Run your app with three simple steps: from fast_dash import FastDash from fast_dash.Components import Text # Step 1: Define your model inference def text_to_text_function ( input_text ): return input_text # Step 2: Specify the input and output components app = FastDash ( callback_fn = text_to_text_function , inputs = Text , outputs = Text , title = 'App title' ) # Step 3: Run your app! app . run () # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And just like that, we have a completely functional interactive app! Output: In a similar way, we can add multiple input as well as output components at the same time. from fast_dash import FastDash from fast_dash.Components import Text , Slider # Step 1: Define your model inference def text_to_text_function ( input_text , slider_value ): processed_text = f ' { input_text } . Slider value is { slider_value } .' return processed_text # Step 2: Specify the input and output components app = FastDash ( callback_fn = text_to_text_function , inputs = [ Text , Slider ], outputs = Text , title = 'App title' ) # Step 3: Run your app! app . run () # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And with just a few more lines, we can add a title icon, subheader and social details. ... app = FastDash ( callback_fn = text_to_text_function , inputs = [ Text , Slider ], outputs = Text , title = 'App title' , title_image_path = 'https://raw.githubusercontent.com/dkedar7/fast_dash/main/docs/assets/favicon.jpg' , subheader = 'Build a proof-of-concept UI for your Python functions lightning fast.' , github_url = 'https://github.com/dkedar7/fast_dash' , linkedin_url = 'https://linkedin.com/in/dkedar7' , twitter_url = 'https://twitter.com/dkedar' ) ... Output: Key features Launch an app only by specifying the types of inputs and outputs. Multiple input and output components simultaneously. Flask-based backend allows easy scalability and customizability. Build fast and iterate. Some features are coming up in future releases: More input and output components. Deploy to Heroku and Google Cloud. and many more. Community Fast Dash is built on open-source. You are encouraged to share your own projects, which will be highlighted on a common community gallery that's upcoming. Join us on Discord . Credits Fast Dash is inspired from gradio and built using Plotly Dash . Dash's Flask-based backend enables Fast Dash apps to scale easily and makes them highly compatibility with other integration services. Many documentation ideas and concepts are borrowed from FastAPI's docs project template. The project template was created with Cookiecutter and zillionare/cookiecutter-pypackage .","title":"Home"},{"location":"#overview","text":"Open source, Python-based tool to develop web applications lightning fast. Documentation: https://dkedar7.github.io/fast_dash/ Source code: https://github.com/dkedar7/fast_dash/ Fast Dash is a Python module that makes the development of web applications fast and easy. It is built on top of Plotly Dash and can be used to build web interfaces for Machine Learning models or to showcase any proof of concept without the hassle of developing UI from scratch.","title":"Overview"},{"location":"#simple-example","text":"Run your app with three simple steps: from fast_dash import FastDash from fast_dash.Components import Text # Step 1: Define your model inference def text_to_text_function ( input_text ): return input_text # Step 2: Specify the input and output components app = FastDash ( callback_fn = text_to_text_function , inputs = Text , outputs = Text , title = 'App title' ) # Step 3: Run your app! app . run () # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And just like that, we have a completely functional interactive app! Output: In a similar way, we can add multiple input as well as output components at the same time. from fast_dash import FastDash from fast_dash.Components import Text , Slider # Step 1: Define your model inference def text_to_text_function ( input_text , slider_value ): processed_text = f ' { input_text } . Slider value is { slider_value } .' return processed_text # Step 2: Specify the input and output components app = FastDash ( callback_fn = text_to_text_function , inputs = [ Text , Slider ], outputs = Text , title = 'App title' ) # Step 3: Run your app! app . run () # * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) And with just a few more lines, we can add a title icon, subheader and social details. ... app = FastDash ( callback_fn = text_to_text_function , inputs = [ Text , Slider ], outputs = Text , title = 'App title' , title_image_path = 'https://raw.githubusercontent.com/dkedar7/fast_dash/main/docs/assets/favicon.jpg' , subheader = 'Build a proof-of-concept UI for your Python functions lightning fast.' , github_url = 'https://github.com/dkedar7/fast_dash' , linkedin_url = 'https://linkedin.com/in/dkedar7' , twitter_url = 'https://twitter.com/dkedar' ) ... Output:","title":"Simple example"},{"location":"#key-features","text":"Launch an app only by specifying the types of inputs and outputs. Multiple input and output components simultaneously. Flask-based backend allows easy scalability and customizability. Build fast and iterate. Some features are coming up in future releases: More input and output components. Deploy to Heroku and Google Cloud. and many more.","title":"Key features"},{"location":"#community","text":"Fast Dash is built on open-source. You are encouraged to share your own projects, which will be highlighted on a common community gallery that's upcoming. Join us on Discord .","title":"Community"},{"location":"#credits","text":"Fast Dash is inspired from gradio and built using Plotly Dash . Dash's Flask-based backend enables Fast Dash apps to scale easily and makes them highly compatibility with other integration services. Many documentation ideas and concepts are borrowed from FastAPI's docs project template. The project template was created with Cookiecutter and zillionare/cookiecutter-pypackage .","title":"Credits"},{"location":"api/","text":"Top-level package for Fast Dash. Components Fastify ( DashComponent , modify_property , label_ = None , placeholder = None , ** kwargs ) Component utility to convert any Dash component into a FastComponent. Source code in fast_dash/Components.py def Fastify ( DashComponent , modify_property , label_ = None , placeholder = None , ** kwargs ): \"\"\" Component utility to convert any Dash component into a FastComponent. \"\"\" class FastComponent ( DashComponent ): \"\"\" Extends component \"\"\" def __init__ ( self , modify_property = modify_property , label_ = label_ , placeholder = placeholder , ** kwargs ): super () . __init__ ( ** kwargs ) self . modify_property = modify_property self . placeholder = placeholder self . label_ = label_ return FastComponent ( modify_property , label_ = label_ , placeholder = placeholder , ** kwargs ) utils Utility functions assign_ids_to_inputs ( inputs , callback_fn ) Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_inputs ( inputs , callback_fn ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( inputs , list ): inputs = [ inputs ] inputs_with_ids = [] for input_ , parameter_name in zip ( inputs , get_input_names_from_callback_fn ( callback_fn ) ): input_ . id = parameter_name inputs_with_ids . append ( copy . deepcopy ( input_ )) return inputs_with_ids assign_ids_to_outputs ( outputs ) Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_outputs ( outputs ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( outputs , list ): outputs = [ outputs ] outputs_with_ids = [] for idx , output_ in enumerate ( outputs ): output_ . id = f \"output- { idx + 1 } \" outputs_with_ids . append ( copy . deepcopy ( output_ )) return outputs_with_ids get_input_names_from_callback_fn ( callback_fn ) Returns the names of function arguments as a list of strings Source code in fast_dash/utils.py def get_input_names_from_callback_fn ( callback_fn ): \"\"\" Returns the names of function arguments as a list of strings \"\"\" signature = inspect . signature ( callback_fn ) parameters = signature . parameters parameter_list = list ( parameters ) return parameter_list pil_to_b64 ( img ) Utility to convert PIL image to a base64 string. Parameters: Name Type Description Default img PIL.Image Input image required Returns: Type Description str Base64 string of the input image Source code in fast_dash/utils.py def pil_to_b64 ( img ): \"\"\" Utility to convert PIL image to a base64 string. Args: img (PIL.Image): Input image Returns: str: Base64 string of the input image \"\"\" buffered = BytesIO () img . save ( buffered , format = \"PNG\" ) img_str = base64 . b64encode ( buffered . getvalue ()) . decode ( \"utf-8\" ) img_str = f \"data:image/png;base64, { img_str } \" return img_str theme_mapper ( theme_name ) Map theme name string ot a dbc theme object Source code in fast_dash/utils.py def theme_mapper ( theme_name ): \"\"\" Map theme name string ot a dbc theme object \"\"\" theme_mapper_dict = { \"CERULEAN\" : dbc . themes . CERULEAN , \"COSMO\" : dbc . themes . COSMO , \"CYBORG\" : dbc . themes . CYBORG , \"DARKLY\" : dbc . themes . DARKLY , \"FLATLY\" : dbc . themes . FLATLY , \"JOURNAL\" : dbc . themes . JOURNAL , \"LITERA\" : dbc . themes . LITERA , \"LUMEN\" : dbc . themes . LUMEN , \"LUX\" : dbc . themes . LUX , \"MATERIA\" : dbc . themes . MATERIA , \"MINTY\" : dbc . themes . MINTY , \"MORPH\" : dbc . themes . MORPH , \"PULSE\" : dbc . themes . PULSE , \"QUARTZ\" : dbc . themes . QUARTZ , \"SANDSTONE\" : dbc . themes . SANDSTONE , \"SIMPLEX\" : dbc . themes . SIMPLEX , \"SKETCHY\" : dbc . themes . SKETCHY , \"SLATE\" : dbc . themes . SLATE , \"SOLAR\" : dbc . themes . SOLAR , \"SPACELAB\" : dbc . themes . SPACELAB , \"SUPERHERO\" : dbc . themes . SUPERHERO , \"UNITED\" : dbc . themes . UNITED , \"VAPOR\" : dbc . themes . VAPOR , \"YETI\" : dbc . themes . YETI , \"ZEPHYR\" : dbc . themes . ZEPHYR , } theme = theme_mapper_dict . get ( theme_name . upper (), dbc . themes . YETI ) return theme","title":"Modules"},{"location":"api/#fast_dash","text":"Top-level package for Fast Dash.","title":"fast_dash"},{"location":"api/#fast_dash.Components","text":"","title":"Components"},{"location":"api/#fast_dash.Components.Fastify","text":"Component utility to convert any Dash component into a FastComponent. Source code in fast_dash/Components.py def Fastify ( DashComponent , modify_property , label_ = None , placeholder = None , ** kwargs ): \"\"\" Component utility to convert any Dash component into a FastComponent. \"\"\" class FastComponent ( DashComponent ): \"\"\" Extends component \"\"\" def __init__ ( self , modify_property = modify_property , label_ = label_ , placeholder = placeholder , ** kwargs ): super () . __init__ ( ** kwargs ) self . modify_property = modify_property self . placeholder = placeholder self . label_ = label_ return FastComponent ( modify_property , label_ = label_ , placeholder = placeholder , ** kwargs )","title":"Fastify()"},{"location":"api/#fast_dash.utils","text":"Utility functions","title":"utils"},{"location":"api/#fast_dash.utils.assign_ids_to_inputs","text":"Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_inputs ( inputs , callback_fn ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( inputs , list ): inputs = [ inputs ] inputs_with_ids = [] for input_ , parameter_name in zip ( inputs , get_input_names_from_callback_fn ( callback_fn ) ): input_ . id = parameter_name inputs_with_ids . append ( copy . deepcopy ( input_ )) return inputs_with_ids","title":"assign_ids_to_inputs()"},{"location":"api/#fast_dash.utils.assign_ids_to_outputs","text":"Modify the 'id' property of inputs. Source code in fast_dash/utils.py def assign_ids_to_outputs ( outputs ): \"\"\" Modify the 'id' property of inputs. \"\"\" if not isinstance ( outputs , list ): outputs = [ outputs ] outputs_with_ids = [] for idx , output_ in enumerate ( outputs ): output_ . id = f \"output- { idx + 1 } \" outputs_with_ids . append ( copy . deepcopy ( output_ )) return outputs_with_ids","title":"assign_ids_to_outputs()"},{"location":"api/#fast_dash.utils.get_input_names_from_callback_fn","text":"Returns the names of function arguments as a list of strings Source code in fast_dash/utils.py def get_input_names_from_callback_fn ( callback_fn ): \"\"\" Returns the names of function arguments as a list of strings \"\"\" signature = inspect . signature ( callback_fn ) parameters = signature . parameters parameter_list = list ( parameters ) return parameter_list","title":"get_input_names_from_callback_fn()"},{"location":"api/#fast_dash.utils.pil_to_b64","text":"Utility to convert PIL image to a base64 string. Parameters: Name Type Description Default img PIL.Image Input image required Returns: Type Description str Base64 string of the input image Source code in fast_dash/utils.py def pil_to_b64 ( img ): \"\"\" Utility to convert PIL image to a base64 string. Args: img (PIL.Image): Input image Returns: str: Base64 string of the input image \"\"\" buffered = BytesIO () img . save ( buffered , format = \"PNG\" ) img_str = base64 . b64encode ( buffered . getvalue ()) . decode ( \"utf-8\" ) img_str = f \"data:image/png;base64, { img_str } \" return img_str","title":"pil_to_b64()"},{"location":"api/#fast_dash.utils.theme_mapper","text":"Map theme name string ot a dbc theme object Source code in fast_dash/utils.py def theme_mapper ( theme_name ): \"\"\" Map theme name string ot a dbc theme object \"\"\" theme_mapper_dict = { \"CERULEAN\" : dbc . themes . CERULEAN , \"COSMO\" : dbc . themes . COSMO , \"CYBORG\" : dbc . themes . CYBORG , \"DARKLY\" : dbc . themes . DARKLY , \"FLATLY\" : dbc . themes . FLATLY , \"JOURNAL\" : dbc . themes . JOURNAL , \"LITERA\" : dbc . themes . LITERA , \"LUMEN\" : dbc . themes . LUMEN , \"LUX\" : dbc . themes . LUX , \"MATERIA\" : dbc . themes . MATERIA , \"MINTY\" : dbc . themes . MINTY , \"MORPH\" : dbc . themes . MORPH , \"PULSE\" : dbc . themes . PULSE , \"QUARTZ\" : dbc . themes . QUARTZ , \"SANDSTONE\" : dbc . themes . SANDSTONE , \"SIMPLEX\" : dbc . themes . SIMPLEX , \"SKETCHY\" : dbc . themes . SKETCHY , \"SLATE\" : dbc . themes . SLATE , \"SOLAR\" : dbc . themes . SOLAR , \"SPACELAB\" : dbc . themes . SPACELAB , \"SUPERHERO\" : dbc . themes . SUPERHERO , \"UNITED\" : dbc . themes . UNITED , \"VAPOR\" : dbc . themes . VAPOR , \"YETI\" : dbc . themes . YETI , \"ZEPHYR\" : dbc . themes . ZEPHYR , } theme = theme_mapper_dict . get ( theme_name . upper (), dbc . themes . YETI ) return theme","title":"theme_mapper()"},{"location":"authors/","text":"Credits Development Lead Kedar Dabhadkar kdabhadk@gmail.com Contributors None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Kedar Dabhadkar kdabhadk@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions. Tips $ pytest tests.test_fast_dash To run a subset of tests. Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/dkedar7/fast_dash/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Fast Dash could always use more documentation, whether as part of the official Fast Dash docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/dkedar7/fast_dash/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up fast_dash for local development. Fork the fast_dash repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/fast_dash.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dkedar7/fast_dash/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ pytest tests.test_fast_dash To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History 0.1.2 (2022-03-06) Supports usage of the same FastComponent multiple times via deepcopy. Correct documentation typos and examples. Added text-to-text examples. Modifications to the Fastify component. 0.1.1 (2022-02-28) First wide release. Adding input, output image functionality. Added mkdocs documentation. 0.1.0 (2022-01-29) First release on PyPI.","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#012-2022-03-06","text":"Supports usage of the same FastComponent multiple times via deepcopy. Correct documentation typos and examples. Added text-to-text examples. Modifications to the Fastify component.","title":"0.1.2 (2022-03-06)"},{"location":"history/#011-2022-02-28","text":"First wide release. Adding input, output image functionality. Added mkdocs documentation.","title":"0.1.1 (2022-02-28)"},{"location":"history/#010-2022-01-29","text":"First release on PyPI.","title":"0.1.0 (2022-01-29)"},{"location":"installation/","text":"Installation Stable release To install Fast Dash, run this command in your terminal: $ pip install fast_dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/main Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Fast Dash, run this command in your terminal: $ pip install fast_dash This is the preferred method to install Fast Dash, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Fast Dash can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/dkedar7/fast_dash Or download the tarball : $ curl -OJL https://github.com/dkedar7/fast_dash/tarball/main Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage Coming soon ...","title":"Tutorial - User guide"},{"location":"usage/#usage","text":"Coming soon ...","title":"Usage"}]}